## Jun√ß√µes em Oracle SQL vs SQL ANSI/ISO:1999

### Tipos de Jun√ß√£o e Suas Sintaxes

| Tipo de Jun√ß√£o              | Sintaxe Oracle Propriet√°ria        | Sintaxe ANSI/ISO SQL:1999               |
|-----------------------------|-------------------------------------|-----------------------------------------|
| Equijun√ß√£o                  | WHERE t1.coluna = t2.coluna         | JOIN t2 ON t1.coluna = t2.coluna        |
| Jun√ß√£o externa esquerda     | t1.coluna = t2.coluna(+)            | LEFT OUTER JOIN t2 ON ...               |
| Jun√ß√£o externa direita      | t1.coluna(+) = t2.coluna            | RIGHT OUTER JOIN t2 ON ...              |
| Jun√ß√£o interna              | WHERE t1.coluna = t2.coluna         | INNER JOIN t2 ON t1.coluna = t2.coluna  |
| Jun√ß√£o externa completa     | (n√£o suportado diretamente)         | FULL OUTER JOIN t2 ON ...               |
| Jun√ß√£o cruzada              | FROM t1, t2                         | CROSS JOIN t2                           |
| Autojun√ß√£o                  | FROM t1 a, t1 b                     | JOIN t1 b ON a.coluna = b.coluna        |

---

## üß† Finalidade das Condi√ß√µes de Jun√ß√£o

As condi√ß√µes de jun√ß√£o servem para:
- Combinar dados de v√°rias tabelas relacionadas
- Controlar os registros exibidos na sa√≠da
- Evitar produtos cartesianos (todas as combina√ß√µes poss√≠veis entre linhas de tabelas)

---

## üß™ Produto Cartesiano (sem condi√ß√£o de jun√ß√£o)

```sql
SELECT e.nome, d.nome_depart
FROM funcionarios e, departamentos d;
```
> ‚ùó Retorna todos os funcion√°rios combinados com todos os departamentos.

---

## ‚úÖ Equijun√ß√£o

### üî∑ Sintaxe Oracle

```sql
SELECT e.nome, d.nome_depart
FROM funcionarios e, departamentos d
WHERE e.id_depart = d.id_depart;
```

### üî∂ Sintaxe ANSI

```sql
SELECT e.nome, d.nome_depart
FROM funcionarios e
JOIN departamentos d ON e.id_depart = d.id_depart;
```

---

## ‚ûï Jun√ß√£o com Condi√ß√µes Extras (AND)

```sql
SELECT e.nome, d.nome_depart
FROM funcionarios e
JOIN departamentos d ON e.id_depart = d.id_depart
WHERE d.localizacao = 'S√£o Paulo'
AND e.salario > 3000;
```

---

## üè∑Ô∏è Uso de Aliases em Jun√ß√µes

```sql
SELECT f.nome AS Funcionario, d.nome_depart AS Departamento
FROM funcionarios f
JOIN departamentos d ON f.id_depart = d.id_depart;
```

- Use aliases curtos para tabelas (`f`, `d`) e nomes descritivos para colunas.
- Melhora a legibilidade e facilita manuten√ß√£o da consulta.

---

## üîÅ Jun√ß√µes Avan√ßadas em SQL Oracle

---

## üö´ N√£o Equijun√ß√£o

A **n√£o equijun√ß√£o** √© usada quando a rela√ß√£o entre colunas n√£o depende de igualdade. Por exemplo, pode-se utilizar operadores como `<`, `>`, `BETWEEN`, etc.

### üî∑ Exemplo: Faixa salarial

```sql
SELECT e.nome, s.faixa_salarial
FROM funcionarios e, faixas_salarial s
WHERE e.salario BETWEEN s.salario_min AND s.salario_max;
```

> üîé Aqui n√£o usamos `=` para relacionar as tabelas, mas sim `BETWEEN`.

---

## üîÑ Jun√ß√£o Externa (Oracle Propriet√°ria)

A jun√ß√£o externa permite retornar registros mesmo quando n√£o h√° correspond√™ncia em outra tabela.

### üîπ Jun√ß√£o externa esquerda (LEFT JOIN)

```sql
SELECT e.nome, d.nome_depart
FROM funcionarios e, departamentos d
WHERE e.id_depart = d.id_depart(+);
```

- Retorna **todos os funcion√°rios**, mesmo que n√£o estejam associados a um departamento.

---

### üî∏ Jun√ß√£o externa direita (RIGHT JOIN)

```sql
SELECT e.nome, d.nome_depart
FROM funcionarios e, departamentos d
WHERE e.id_depart(+) = d.id_depart;
```

- Retorna **todos os departamentos**, mesmo que n√£o tenham funcion√°rios.

> ‚ö†Ô∏è As jun√ß√µes externas com `(+)` s√£o espec√≠ficas do Oracle. Para maior portabilidade, prefira a sintaxe ANSI.

---

### ‚úÖ Dica: Substituindo por ANSI (boa pr√°tica)

```sql
SELECT e.nome, d.nome_depart
FROM funcionarios e
LEFT OUTER JOIN departamentos d ON e.id_depart = d.id_depart;
```

---

## üìò Observa√ß√µes

- A cl√°usula `(+)` sempre vai na **tabela que pode ter valores nulos** (lado opcional).
- Em ambientes modernos e multiplataforma, **prefira ANSI SQL** para maior compatibilidade e clareza.




======================


## üîó Jun√ß√µes, N√£o Equijun√ß√µes e Boas Pr√°ticas com SQL
1. Crie uma jun√ß√£o com base no custo do evento entre as tabelas D_EVENTS e D_PACKAGES da
DJs on Demand. Exiba o nome e o c√≥digo de cada evento.
2. Usando o banco de dados Oracle, crie uma consulta que retorne o sobrenome, o sal√°rio e o n√≠vel
do cargo dos funcion√°rios com base no sal√°rio. Selecione o sal√°rio entre a faixa salarial m√≠nima e
m√°xima.
3. Qual condi√ß√£o requer a cria√ß√£o de uma n√£o equijun√ß√£o?
4. Reescreva a instru√ß√£o de n√£o equijun√ß√£o a seguir usando os operadores l√≥gicos de condi√ß√£o
(AND, OR, NOT): WHERE a.ranking BETWEEN g.lowest_rank AND g.highest_rank
5. Como voc√™ sabe quando um alias de tabela deve ou n√£o ser usado?
6. Qual tipo de jun√ß√£o voc√™ usaria para encontrar dados entre uma faixa de n√∫meros?
7. Voc√™ precisa produzir para a Global Fast Foods um relat√≥rio que mostre os clientes e os pedidos.
Um cliente dever√° ser inclu√≠do no relat√≥rio mesmo se n√£o houver pedidos para ele.
---

### 1Ô∏è‚É£ Jun√ß√£o com base no custo entre `D_EVENTS` e `D_PACKAGES`

```sql
SELECT e.nome_evento, e.codigo_evento
FROM d_events e
JOIN d_packages p ON e.custo_evento = p.custo_pacote;
```

---

### 2Ô∏è‚É£ Consulta: Sal√°rio entre faixa m√≠nima e m√°xima

```sql
SELECT f.sobrenome, f.salario, g.nivel_cargo
FROM funcionarios f
JOIN faixas_salariais g
ON f.salario BETWEEN g.salario_min AND g.salario_max;
```

---

### 3Ô∏è‚É£ Qual condi√ß√£o requer n√£o equijun√ß√£o?

Uma **n√£o equijun√ß√£o** √© necess√°ria quando os registros de duas tabelas devem ser combinados com base em uma **condi√ß√£o diferente de igualdade**, como `BETWEEN`, `<`, `>`, `!=`.

Exemplo:
```sql
f.salario BETWEEN g.salario_min AND g.salario_max
```

---

### 4Ô∏è‚É£ Reescrevendo a instru√ß√£o com operadores l√≥gicos

```sql
WHERE a.ranking >= g.lowest_rank AND a.ranking <= g.highest_rank
```

---

### 5Ô∏è‚É£ Quando usar alias de tabela?

Use **alias de tabela** quando:
- Existem v√°rias tabelas na consulta.
- H√° ambiguidade entre nomes de colunas.
- Para simplificar e abreviar nomes longos.

**Evite** alias se houver apenas uma tabela e n√£o houver ambiguidade.

---

### 6Ô∏è‚É£ Qual tipo de jun√ß√£o usar com faixas de n√∫mero?

üëâ Use **n√£o equijun√ß√£o** com `BETWEEN`, `>=`, `<=`, etc., para encontrar valores que se encaixam dentro de um intervalo.

---

### 7Ô∏è‚É£ Relat√≥rio de clientes e pedidos (jun√ß√£o externa)

```sql
SELECT c.nome_cliente, p.numero_pedido
FROM clientes c
LEFT JOIN pedidos p ON c.id_cliente = p.id_cliente;
```

> ‚úÖ Isso garante que todos os clientes sejam listados, mesmo sem pedidos.




