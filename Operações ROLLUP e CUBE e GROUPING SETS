## Agrupamentos Avan√ßados em SQL

### üîπ Usar `ROLLUP` para produzir subtotais

O `ROLLUP` permite gerar subtotais e totais acumulados com base nos n√≠veis de agrupamento especificados.

#### Exemplo:
```sql
SELECT department_id, job_id, SUM(salary) AS total_salary
FROM employees
GROUP BY ROLLUP(department_id, job_id);


## üìò Vocabul√°rio SQL - Agrupamentos Avan√ßados

### 1. Usado para criar subtotais que envolvem desde o n√≠vel mais detalhado at√© um total geral, seguindo uma lista de agrupamento especificada na cl√°usula

**Resposta:** `ROLLUP`

---

### 2. Uma extens√£o da cl√°usula GROUP BY semelhante a ROLLUP que produz relat√≥rios de tabula√ß√£o cruzada

**Resposta:** `CUBE`

---

### 3. Usado para especificar v√°rios agrupamentos de dados

**Resposta:** `GROUPING SETS`


# Consultas SQL com ROLLUP, CUBE e GROUPING SETS

---

## 1. Sal√°rio total por `manager_id` e `job_id` com subtotais por gerente e total geral

```sql
SELECT manager_id, job_id, SUM(salary) AS total_salary
FROM employees
GROUP BY ROLLUP(manager_id, job_id);
‚úÖ Explica√ß√£o:
ROLLUP(manager_id, job_id) agrupa os dados por manager_id e job_id, incluindo subtotais por manager_id e um total geral de todos os sal√°rios.

2. Sal√°rio total por manager_id e job_id com subtotais por gerente, por cargo e total geral

SELECT manager_id, job_id, SUM(salary) AS total_salary
FROM employees
GROUP BY CUBE(manager_id, job_id);
‚úÖ Explica√ß√£o:
CUBE(manager_id, job_id) produz todas as combina√ß√µes poss√≠veis entre manager_id e job_id, retornando:

Totais por manager_id (independente do job_id)

Totais por job_id (independente do manager_id)

Totais por cada par (manager_id, job_id)

Total geral

3. Consulta usando GROUPING SETS para diferentes n√≠veis de agrupamento

SELECT department_id, manager_id, job_id, SUM(salary) AS total_salary
FROM employees
GROUP BY GROUPING SETS (
  (department_id, manager_id, job_id),
  (manager_id, job_id),
  (department_id, manager_id)
);
‚úÖ Explica√ß√£o:
GROUPING SETS permite definir m√∫ltiplos agrupamentos personalizados em uma √∫nica consulta.

Os resultados incluem:

Sal√°rio total por departamento, gerente e cargo.

Sal√°rio total por gerente e cargo (independente do departamento).

Sal√°rio total por departamento e gerente (independente do cargo).

===================

# Operadores SET em SQL

## ‚úÖ Defini√ß√£o e Finalidade

Os **operadores SET** em SQL s√£o utilizados para **combinar os resultados de duas ou mais consultas SELECT** em um √∫nico conjunto de resultados. S√£o √∫teis quando voc√™ deseja recuperar dados de diferentes tabelas ou consultas separadas, mas apresent√°-los em um √∫nico resultado unificado.

---

## ‚úÖ Principais Operadores SET

### 1. `UNION`
- **Finalidade:** Combina os resultados de duas consultas e **remove duplicatas**.
- **Exemplo:**
  ```sql
  SELECT city FROM customers
  UNION
  SELECT city FROM suppliers;
2. UNION ALL
Finalidade: Combina os resultados de duas consultas e mant√©m duplicatas.

Exemplo:


SELECT city FROM customers
UNION ALL
SELECT city FROM suppliers;

3. INTERSECT
Finalidade: Retorna apenas os valores comuns a ambas as consultas.

Exemplo:


SELECT city FROM customers
INTERSECT
SELECT city FROM suppliers;
4. MINUS (Oracle) ou EXCEPT (SQL Server/PostgreSQL)
Finalidade: Retorna os registros da primeira consulta que n√£o est√£o na segunda.

Exemplo:

SELECT city FROM customers
MINUS
SELECT city FROM suppliers;

‚úÖ Regras para uso dos operadores SET
As consultas combinadas devem ter o mesmo n√∫mero de colunas e colunas compat√≠veis em tipo de dados.

Os nomes das colunas no resultado final s√£o determinados pela primeira consulta.

Para aplicar ORDER BY, use somente na √∫ltima consulta.

Exemplo com ORDER BY:

SELECT name FROM employees
UNION
SELECT name FROM managers
ORDER BY name;
‚úÖ Quando usar cada operador?

Operador	                Usa duplicatas?	          Objetivo
UNION	                    ‚ùå N√£o	                  Mesclar dados diferentes, sem repeti√ß√£o
UNION ALL	                ‚úÖ Sim	                  Mesclar dados com repeti√ß√£o permitida
INTERSECT	                ‚ùå N√£o	                  Filtrar dados comuns
MINUS/EXCEPT	            ‚ùå N√£o	                  Excluir registros da segunda consulta



# üìò Vocabul√°rio: Operadores SET e Termos Relacionados

Abaixo est√£o os termos correspondentes √†s defini√ß√µes fornecidas:

---

**Defini√ß√£o:** Um operador que retorna todas as linhas de ambas as tabelas e elimina as duplicadas  
**üëâ Resposta:** `UNION`

---

**Defini√ß√£o:** Colunas criadas para corresponder a consultas em outra tabela que n√£o est√£o em ambas as tabelas  
**üëâ Resposta:** `OUTER JOIN` *(apesar de "colunas" ser mencionado, o termo adequado nesse contexto √© sobre jun√ß√£o externa que lida com dados faltantes)*

---

**Defini√ß√£o:** Um operador que retorna todas as linhas de ambas as tabelas, incluindo as duplicadas  
**üëâ Resposta:** `UNION ALL`

---

**Defini√ß√£o:** Usados para combinar os resultados de v√°rias instru√ß√µes SELECT em um √∫nico resultado  
**üëâ Resposta:** `Operadores SET` (como UNION, UNION ALL, INTERSECT, MINUS)

---

**Defini√ß√£o:** Um operador que retorna as linhas exclusivas de cada tabela  
**üëâ Resposta:** `MINUS` (no Oracle) ou `EXCEPT` (em outros bancos)

---

**Defini√ß√£o:** Um operador que retorna as linhas comuns a ambas as tabelas  
**üëâ Resposta:** `INTERSECT`


==============


# üìò Operadores SET e Consultas Combinadas

## 1. Quais s√£o os diversos operadores SET?

- `UNION`: Combina os resultados de duas consultas e elimina duplicatas.
- `UNION ALL`: Combina os resultados de duas consultas e **mant√©m duplicatas**.
- `INTERSECT`: Retorna apenas as linhas que est√£o presentes **em ambas** as consultas.
- `MINUS` (Oracle) ou `EXCEPT` (outros bancos): Retorna as linhas que est√£o na **primeira consulta, mas n√£o na segunda**.

---

## 2. Consulta que retorna dados combinados de `employees` e `job_history` (sem duplicatas)

```sql
SELECT employee_id, job_id, hire_date, department_id
FROM employees

UNION

SELECT employee_id, job_id, start_date, department_id
FROM job_history;



3. Consulta modificada para manter as duplicatas usando UNION ALL e ordena√ß√£o por employee_id

SELECT employee_id, job_id, hire_date, department_id
FROM employees

UNION ALL

SELECT employee_id, job_id, start_date, department_id
FROM job_history
ORDER BY employee_id;

üìù Quantas linhas extras foram retornadas?
Para descobrir, compare o total de linhas da consulta com UNION e com UNION ALL.
As linhas extras s√£o aquelas que aparecem repetidas nos dois conjuntos de dados.

4. Consulta para listar funcion√°rios que nunca mudaram de cargo

SELECT employee_id, first_name, last_name
FROM employees
WHERE employee_id NOT IN (SELECT employee_id FROM job_history);
üìù Essa consulta retorna os funcion√°rios que n√£o est√£o presentes na tabela job_history, ou seja, nunca tiveram mudan√ßa de cargo registrada.
